#+TITLE: Python and 0MQ

* Introduction
  I'm Noufal Ibrahim

* Microservices
  - Large applications
  - Moving things to separate services
  - Communicate between them
  - Each thing can be separately scaled/managed
  - Each thing can be in a different language
  - Can be on separate machines

* Communication between services
  - Conventionally used a message bus
  - [[./bus.png]]  
  - The bus is a liability
  - A point of failure
  - RabbitMQ / AMQP

* Distributed message queue
  - Remove the message queue
  - So, MQ without an MQ
  - Or Zero MQ. i.e. 0MQ or ZMQ

* 0MQ
  - The distribution is still done.
  - But we don't have a server anymore.
  - Nodes have MQ infrastructure builtin.
  - More work, more scalable, more flexible.
  - [[./zmq-layout.png]]

* 0MQ
  - Uses the socket API
  - =socket=, =connect=, =accept=, =setsockopt= etc.
  - With some extensions

* Various "socket types"
  - Each has different behaviours.
  - e.g. PUB/SUB, REQ/REP, PAIR etc.
  - Thing of them as Lego^tm blocks.
  - Let's see two examples

* Simple request response 
  - A pair of REP/REQ sockets
    [[file:req-rep.png]]
  - Lockstep send/receive
  - Example code

* Pub Sub
  - A server "publishes" some information.
  - Multiple clients can "subscribe" to this.
  - Data distribution
    [[file:pub-sub.png]]

* Parallel pipeline
  - A source generates data.
  - Data "push"ed to workers
  - Processed
  - Collected back at a sink.
  [[file:parallel-workers.png]]

* Example  
  - Consider a simple fibonacci program.
  - [[./code/c0_fib.py][In Python]]
  - Now, this is a library.
  - Let's make this work as a [[file:code/c1_fib_service.py][small service]]
  - And write some simple [[file:code/perf01.py][performance]] [[file:code/perf02.py][scripts]]

* Current situation
  - [[./fib.png]]
  - Our service has just a single worker
  - Good single request performance.
  - Poor concurrent performance. t r

* New architecture
  [[./workers.png]]






    
    

  

